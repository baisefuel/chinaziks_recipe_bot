from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from search import search


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'back':
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Çüîç", callback_data='search')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Treat's Searcher! üë®üèæ‚Äçü¶Ø\n"
        "–ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü•µ\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üòä", reply_markup=reply_markup)


    if query.data == 'search':
        keyboard = [
            [InlineKeyboardButton("ru", callback_data='lang_ru')],
            [InlineKeyboardButton("en", callback_data='lang_en')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)

    if query.data == "lang_en":
        context.user_data["lang"] = "en"
    elif query.data == "lang_ru":
        context.user_data["lang"] = "ru"

    if query.data in ['lang_ru', 'lang_en']:
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞ üçΩ", callback_data='search_by_name')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É üçó", callback_data='search_by_ingredients')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=reply_markup)

    if query.data == 'search_by_name':
        context.user_data["mode"] = "name"
        await query.edit_message_text('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–±–æ—Ä—â", "–ø–∏—Ä–æ–∂–∫–∏", "—Å–∞–ª–∞—Ç"')

    if query.data == 'search_by_ingredients':
        context.user_data["mode"] = "ingredients"
        await query.edit_message_text('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫"')

    if query.data == 'next_page':
        context.user_data["page"] += 1
        await search(update, context, is_callback=True)

    if query.data == 'prev_page':
        context.user_data["page"] -= 1
        await search(update, context, is_callback=True)

    if query.data == 'back_to_mode':
        context.user_data.pop("search_text", None)
        context.user_data.pop("page", None)
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞ üçΩ", callback_data='search_by_name')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É üçó", callback_data='search_by_ingredients')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=reply_markup)

