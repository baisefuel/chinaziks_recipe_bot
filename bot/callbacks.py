from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from add_recipe import save_recipe, start_add_recipe
from search import search, translate_to_ru
import ast


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    lang = context.user_data.get("lang", "en")

    def maybe_translate(text):
        return translate_to_ru(text) if lang == "ru" else text

    def format_steps(text):
        try:
            parsed = ast.literal_eval(text)
            if isinstance(parsed, list):
                cleaned_steps = [step.strip().strip('"').strip("'") for step in parsed]
                return "\n".join([f"{i+1}. {step}" for i, step in enumerate(cleaned_steps)])
            return text
        except:
            return text
        
    def clean_list_text(text):
        try:
            parsed = ast.literal_eval(text)
            if isinstance(parsed, list):
                return ", ".join(item.strip().strip('"').strip("'") for item in parsed)
            return text
        except:
            return text

    if data == 'back':
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Çüîç", callback_data='search')],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç‚ûï", callback_data='add_recipe')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Treat's Searcher! üë®üèæ‚Äçü¶Ø\n"
            "–ë–æ—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ ü•µ\n"
            "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üòä",
            reply_markup=reply_markup
        )

    elif data == 'search':
        keyboard = [
            [InlineKeyboardButton("ru", callback_data='lang_ru')],
            [InlineKeyboardButton("en", callback_data='lang_en')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data in ['lang_ru', 'lang_en']:
        context.user_data["lang"] = 'ru' if data == 'lang_ru' else 'en'
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞ üçΩ", callback_data='search_by_name')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É üçó", callback_data='search_by_ingredients')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data='search_user_recipes')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        await query.edit_message_text("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'search_by_name':
        context.user_data["mode"] = "name"
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:")

    elif data == 'search_by_ingredients':
        context.user_data["mode"] = "ingredients"
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

    elif data == 'search_user_recipes':
        context.user_data["mode"] = "user_recipes"
        context.user_data["search_text"] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã"
        context.user_data["page"] = 1
        await search(update, context, is_callback=True)

    elif data == 'next_page':
        context.user_data["page"] += 1
        await search(update, context, is_callback=True)

    elif data == 'prev_page':
        context.user_data["page"] -= 1
        await search(update, context, is_callback=True)

    elif data == 'back_to_mode':
        context.user_data.pop("search_text", None)
        context.user_data.pop("page", None)
        context.user_data.pop("selected_recipe_id", None)
        keyboard = [
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥–∞ üçΩ", callback_data='search_by_name')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É üçó", callback_data='search_by_ingredients')],
            [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data='search_user_recipes')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚è™", callback_data='back')]
        ]
        await query.edit_message_text("–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == 'noop':
        return

    elif data.startswith("select_"):
        parts = data.split("_")
        if len(parts) != 2 or not parts[1].isdigit():
            return

        selected_index = int(parts[1]) - 1
        recipe_ids = context.user_data.get("search_results", [])
        if selected_index < 0 or selected_index >= len(recipe_ids):
            await query.edit_message_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start")
            return

        recipe_id = recipe_ids[selected_index]
        context.user_data["selected_recipe_id"] = recipe_id
        context.user_data["selected_index"] = selected_index

        cursor = context.bot_data["db_conn"].cursor()
        cursor.execute("SELECT name FROM recipes WHERE id = %s", (recipe_id,))
        row = cursor.fetchone()
        recipe_name = maybe_translate(row[0]) if row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"

        keyboard = [
            [InlineKeyboardButton("ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data="recipe_ingredients")],
            [InlineKeyboardButton("üßæ –ì—Ä–∞–º–æ–≤–∫–∏", callback_data="recipe_ingredients_raw")],
            [InlineKeyboardButton("üìñ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data="recipe_steps")],
            [InlineKeyboardButton("üçΩ –ü–æ—Ä—Ü–∏–∏", callback_data="recipe_servings")],
            [InlineKeyboardButton("üìè –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏", callback_data="recipe_serving_size")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="recipe_full")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")],
        ]
        await query.edit_message_text(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç: "{recipe_name}"\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("recipe_"):
        recipe_id = context.user_data.get("selected_recipe_id")
        selected_index = context.user_data.get("selected_index", 0)

        if not recipe_id:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç.")
            return

        cursor = context.bot_data["db_conn"].cursor()

        if data == "recipe_ingredients":
            cursor.execute("SELECT ingredients FROM recipes WHERE id = %s", (recipe_id,))
            ingredients = cursor.fetchone()[0]
            cleaned = clean_list_text(ingredients)
            translated = maybe_translate(cleaned)
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(f"ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{translated}", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "recipe_ingredients_raw":
            cursor.execute("SELECT ingredients_raw FROM recipes WHERE id = %s", (recipe_id,))
            raw = cursor.fetchone()[0]
            cleaned = clean_list_text(raw)
            translated = maybe_translate(cleaned)
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(f"üßæ –ì—Ä–∞–º–æ–≤–∫–∏:\n{translated}", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "recipe_steps":
            cursor.execute("SELECT steps FROM recipes WHERE id = %s", (recipe_id,))
            steps = cursor.fetchone()[0]
            cleaned = clean_list_text(steps)
            translated = maybe_translate(cleaned)
            formatted = format_steps(translated)
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(f"üìñ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{formatted}", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "recipe_servings":
            cursor.execute("SELECT servings FROM recipes WHERE id = %s", (recipe_id,))
            servings = cursor.fetchone()[0]
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(f"üçΩ –ü–æ—Ä—Ü–∏–∏: {servings}", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "recipe_serving_size":
            cursor.execute("SELECT serving_size FROM recipes WHERE id = %s", (recipe_id,))
            size = cursor.fetchone()[0]
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(f"üìè –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: {size}", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "recipe_full":
            cursor.execute("""
                SELECT name, ingredients, ingredients_raw, steps, servings, serving_size, created_by 
                FROM recipes WHERE id = %s
            """, (recipe_id,))
            row = cursor.fetchone()
            if not row:
                await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ü–µ–ø—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return

            name, ingredients, raw, steps, servings, size, creator = row
            creator_info = creator if creator else "–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞)"
            
            translated_name = maybe_translate(name)
            translated_ingredients = maybe_translate(clean_list_text(ingredients))
            translated_raw = maybe_translate(clean_list_text(raw))
            translated_steps = format_steps(maybe_translate(clean_list_text(steps)))

            full_info = (
                f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {translated_name}\n"
                f"ü•ï –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {translated_ingredients}\n"
                f"üßæ –ì—Ä–∞–º–æ–≤–∫–∏: {translated_raw}\n"
                f"üìñ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{translated_steps}\n"
                f"üçΩ –ü–æ—Ä—Ü–∏–∏: {servings}\n"
                f"üìè –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: {size}\n"
                f"üë®‚Äçüç≥ {creator_info}"
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_{selected_index + 1}")]]
            await query.edit_message_text(full_info, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "back_to_results":
        await search(update, context, is_callback=True)
    
    elif data == 'add_recipe':
        await start_add_recipe(update, context)
    
    elif data == "lang_ru_add":
        context.user_data["add_recipe"]["lang"] = "ru"
        await save_recipe(update, context)

    elif data == "lang_en_add":
        context.user_data["add_recipe"]["lang"] = "en"
        await save_recipe(update, context)