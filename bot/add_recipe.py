from telegram import Update
from telegram.ext import ContextTypes

async def start_add_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_recipe"] = {}

    if update.message:
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    elif update.callback_query:
        await update.callback_query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")

async def handle_add_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "add_recipe" not in context.user_data:
        await update.message.reply_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'. –í–≤–µ–¥–∏ /start –∑–∞–Ω–æ–≤–æ.")
        return

    recipe_data = context.user_data["add_recipe"]
    text = update.message.text

    if "name" not in recipe_data:
        recipe_data["name"] = text
        await update.message.reply_text("ü•ï –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    elif "ingredients" not in recipe_data:
        recipe_data["ingredients"] = text
        await update.message.reply_text("üìã –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–º–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    elif "ingredients_raw" not in recipe_data:
        recipe_data["ingredients_raw"] = text if text.lower() != "–Ω–µ—Ç" else ""
        await update.message.reply_text("üìñ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–∫–∞–∂–¥—ã–π —à–∞–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    elif "steps" not in recipe_data:
        recipe_data["steps"] = text
        await update.message.reply_text("üçΩ –°–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ü–∏–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è?")
    elif "servings" not in recipe_data:
        recipe_data["servings"] = text
        await update.message.reply_text("‚öñÔ∏è –ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏?")
    elif "serving_size" not in recipe_data:
        recipe_data["serving_size"] = text
        await save_recipe(update, context)

async def save_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db_conn = context.bot_data["db_conn"]
    recipe_data = context.user_data["add_recipe"]
    lang = context.user_data.get("lang", "en")

    name = recipe_data["name"]
    ingredients = recipe_data["ingredients"]
    ingredients_raw = recipe_data["ingredients_raw"]
    steps = recipe_data["steps"]
    servings = recipe_data["servings"]
    serving_size = recipe_data["serving_size"]
    created_by = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    cursor = db_conn.cursor()
    cursor.execute("""
        INSERT INTO recipes (name, ingredients, ingredients_raw, steps, servings, serving_size, created_by, lang)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
    """, (
        name, ingredients, ingredients_raw, steps, servings, serving_size, created_by,
        "ru" if lang == "ru" else None
    ))
    db_conn.commit()

    await update.message.reply_text("‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ!")

    context.user_data.pop("add_recipe", None)